'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports['default'] = debounce;

var _validators = require('../../utils/validators');

function debounce() {
  var wait = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 300;
  var immediate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  return function (target, key, descriptor) {
    var userFunc = descriptor.value;

    (0, _validators.validateFunction)(userFunc, 'debounce');

    var timeout = void 0;

    return _extends({}, descriptor, {
      value: function debouncer() {
        var _this = this;

        for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
          params[_key] = arguments[_key];
        }

        var callNow = immediate && !timeout;
        clearTimeout(timeout);

        timeout = setTimeout(function () {
          timeout = null;
          if (!immediate) {
            userFunc.apply(_this, [].concat(params));
          }
        }, wait);

        if (callNow) {
          userFunc.apply(this, [].concat(params));
        }
      }
    });
  };
}