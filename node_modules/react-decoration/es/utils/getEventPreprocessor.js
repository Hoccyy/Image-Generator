'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports['default'] = getEventPreprocessor;

var _validators = require('../utils/validators');

function getEventPreprocessor(decorator) {
  for (var _len = arguments.length, methods = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    methods[_key - 1] = arguments[_key];
  }

  if (methods.length === 0) {
    throw new Error('Invalid method list');
  }

  return function (target, key, descriptor) {
    var userHandler = target;

    if (typeof userHandler !== 'function') {
      userHandler = descriptor && descriptor.value;
    }

    (0, _validators.validateFunction)(userHandler, decorator);

    return _extends({}, descriptor, {
      value: function processEvent(event) {
        methods.forEach(function (method) {
          if (event && method && typeof event[method] === 'function') {
            event[method]();
          }
        });

        for (var _len2 = arguments.length, params = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          params[_key2 - 1] = arguments[_key2];
        }

        userHandler.apply(this, [event].concat(params));
      }
    });
  };
}