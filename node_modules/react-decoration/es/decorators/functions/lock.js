'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports['default'] = lock;

var _validators = require('../../utils/validators');

function lock(target, key, descriptor) {
  var userFunc = descriptor.value;

  (0, _validators.validateFunction)(userFunc, 'lock');

  return _extends({}, descriptor, {
    value: function locker() {
      if (userFunc) {
        for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
          params[_key] = arguments[_key];
        }

        // Call the result immediately, but then set the function to
        // null so it cannot be called again
        userFunc.apply(this, [].concat(params));
        userFunc = null;
      }
    }
  });
}